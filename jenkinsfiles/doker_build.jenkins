#!groovy
// Run docker build
properties([disableConcurrentBuilds()])

pipeline {
    agent {
        label 'master'
        }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    stages {
        stage("create docker image") {
            steps {
                echo " ============== start building image =================="
               dir ('docker/toolbox') {
                    sh 'docker build . '
               }
            }
        }
    stage('test') {
        pythonImage.inside {
            sh '. /tmp/venv/bin/activate && python -m pytest --junitxml=build/results.xml'
        }
      }
    stage('collect test results') {
        junit 'build/results.xml'
    }
    }
}

pipeline {
     agent {
        label 'master'
        }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    stages {
     stage("create docker image") {
            steps {
                echo " ============== start building image =================="
               dir ('docker/toolbox') {
                    sh 'docker build . '
               }
            }
        }
     stage('Test') {
            agent {
                docker {
                    image 'qnib/pytest'
                }
            }
            steps {
                sh 'py.test --junit-xml test-reports/results.xml tests/test_api'
            }
            post {
                always {
                    junit 'test-reports/results.xml'
                }
            }
    }
}
}